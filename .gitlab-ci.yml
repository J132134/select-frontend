image: node:carbon-alpine

before_script:
  - yarn install --frozen-lockfile

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - node_modules/

stages:
  - build
  - deploy

build:prod: &build
  stage: build
  only:
    - master
    - /release\/.*/
    - /hotfix\/.*/
  script:
    - yarn build
  artifacts:
    paths:
      - dist/

build:dev:
  <<: *build
  only:
    - develop
  script:
    - unset ASSET_PATH
    - unset SENTRY_DSN
    - yarn webpack
  variables:
    SELECT_URL: https://select.ridi.io
    SELECT_API: https://select-api.dev.ridi.io
    STORE_URL: https://master.test.ridi.io
    STORE_API: https://master.test.ridi.io
    PAY_URL: https://pay.ridi.io
    PAY_API: https://pay-api.dev.ridi.io
    ACCOUNT_API: https://account.dev.ridi.io
    OAUTH2_CLIENT_ID: $DEV_OAUTH2_CLIENT_ID

.deploy: &deploy
  image: ridibooks/gitlab-ci-docker-aws
  stage: deploy
  cache: {}
  before_script: []
  only:
    - master

.deploy-variables:
  variables: &deploy-variables
    S3_STAGING_FILE: s3://${PROD_S3_BUCKET}/staging.html
    S3_RELEASE_CANDIDATE_FILE: s3://${PROD_S3_BUCKET}/releases/${CI_COMMIT_SHA}.html
    S3_RELEASE_PARAMS: "--metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate"
    S3_ASSETS_PARAMS: "--cache-control public,max-age=31536000"

develop:
  <<: *deploy
  only:
    - develop
  variables:
    <<: *deploy-variables
    AWS_ACCESS_KEY_ID: ${DEV_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV_AWS_SECRET_ACCESS_KEY}
  script:
    - aws s3 sync dist s3://${DEV_S3_BUCKET} --exclude "staging.html" ${S3_ASSETS_PARAMS}
    - aws s3 cp s3://${DEV_S3_BUCKET}/index.html s3://${DEV_S3_BUCKET}/index.html ${S3_RELEASE_PARAMS}
  environment:
    name: develop
    url: https://select.ridi.io

staging:
  <<: *deploy
  only:
    - /release\/.*/
    - /hotfix\/.*/
  variables:
    <<: *deploy-variables
    AWS_ACCESS_KEY_ID: ${PROD_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${PROD_AWS_SECRET_ACCESS_KEY}
  script:
    - aws s3 sync dist s3://${PROD_S3_BUCKET} --exclude "index.html" --exclude "*.map" ${S3_ASSETS_PARAMS}
    - aws s3 cp ${S3_STAGING_FILE} ${S3_STAGING_FILE} ${S3_RELEASE_PARAMS}
  environment:
    name: staging
    url: https://select.ridibooks.com

release-candidate:
  <<: *deploy
  variables:
    <<: *deploy-variables
    AWS_ACCESS_KEY_ID: ${PROD_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${PROD_AWS_SECRET_ACCESS_KEY}
  script:
    - aws s3 sync dist s3://${PROD_S3_BUCKET} --exclude "*.html" --exclude "*.map" ${S3_ASSETS_PARAMS}
    - aws s3 cp dist/index.html ${S3_RELEASE_CANDIDATE_FILE}

production:
  <<: *deploy
  variables:
    <<: *deploy-variables
    AWS_ACCESS_KEY_ID: ${PROD_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${PROD_AWS_SECRET_ACCESS_KEY}
  when: manual
  script:
    - aws s3 cp ${S3_RELEASE_CANDIDATE_FILE} s3://${PROD_S3_BUCKET}/index.html ${S3_RELEASE_PARAMS}
  environment:
    name: production
    url: https://select.ridibooks.com

sourcemaps:
  <<: *deploy
  image: getsentry/sentry-cli
  variables:
    SENTRY_LOG_LEVEL: debug
  script:
    - sentry-cli releases new ${CI_COMMIT_SHA}
    - sentry-cli releases files ${CI_COMMIT_SHA} upload-sourcemaps ${CI_PROJECT_DIR}/dist/*.map
    - sentry-cli releases finalize ${CI_COMMIT_SHA}

serverless:
  stage: deploy
  when: manual
  variables:
    AWS_ACCESS_KEY_ID: ${SLS_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${SLS_AWS_SECRET_ACCESS_KEY}
  cache: {}
  before_script:
    - cd serverless
    - yarn install --frozen-lockfile
  script:
    - yarn serverless deploy --stage production -v
  only:
    - master
